// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRoles {
  USER
  ADMIN
}

model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRoles @default(USER)
  accounts      Account[]
  notes         Note[] @relation("UserNotes")

  notesSharedWithUserIDs String[]   @db.ObjectId
  notesSharedWithUser  Note[] @relation(name:"sharingNotes",fields: [notesSharedWithUserIDs], references: [id])
 
  @@map("users")
}

model Note {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  content       String?
  userId        String    @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userIDs String[]   @db.ObjectId
  users  User[] @relation(name:"sharingNotes", fields: [userIDs], references: [id])

  user      User @relation("UserNotes",fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model VerificationToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])

  @@map("verificationTokens")
}

model PasswordResetToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])

  @@map("passwordResetTokens")
}

